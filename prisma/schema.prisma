// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  username     String    @unique
  firstName    String
  lastName     String
  email        String    @unique
  password     String
  pictureUrl   String    @default("")
  thumbnailUrl String    @default("")
  decks        Deck[]
  sessions     Session[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id         String     @id @default(cuid())
  scryfallId String     @unique
  name       String
  manaCost   String?
  typeLine   String?
  imgUrl     String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  decks      DeckCard[]
}

model Deck {
  id        String     @id @default(cuid())
  name      String
  userId    String
  format    String
  isPublic  Boolean    @default(false)
  user      User       @relation(fields: [userId], references: [id])
  cards     DeckCard[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model DeckCard {
  id     String @id @default(cuid())
  deck   Deck   @relation(fields: [deckId], references: [id])
  deckId String
  card   Card   @relation(fields: [cardId], references: [id])
  cardId String
  count  Int    @default(1) // cantidad de copias
}
